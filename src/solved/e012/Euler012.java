package solved.e012;

/**
 *The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Euler012 {
    public static void main(String[] args) {
        System.out.println(new Euler012().run());
    }

    public String run() {
        int triangleNumber = 0;
        for (int i = 1; ; i++) {
            triangleNumber += i;
            if (calcDivisors(triangleNumber) > 500)
                break;
        }

        return Integer.toString(triangleNumber);
    }

    private int calcDivisors(int n) {
        double sqrt = Math.sqrt(n);
        int divisorCount = 0;

        // when n is dividable by i then the result of the division is also a divisor of n, this number will
        // automatically be larger than the square root of n (except for when i is the exact square root of n)
        for (int i = 1; i < sqrt; i++) {
            if (n % i == 0) {
                divisorCount += 2;
            }
        }

        // handle perfect squares
        if (sqrt * sqrt == n) {
            divisorCount++;
        }

        return divisorCount;
    }
}
